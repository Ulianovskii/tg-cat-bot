# app/db/simple_migrate.py
import logging
from sqlalchemy import text
from app.db.database import SessionLocal

logger = logging.getLogger(__name__)

def simple_migrate():
    """–ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è - –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏"""
    session = SessionLocal()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        result = session.execute(text("PRAGMA table_info(users)"))
        existing_columns = [row[1] for row in result]
        
        print("üîç Existing columns:", existing_columns)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
        if 'total_requests_used' not in existing_columns:
            session.execute(text('ALTER TABLE users ADD COLUMN total_requests_used INTEGER DEFAULT 0'))
            print("‚úÖ Added total_requests_used column")
        
        if 'reset_counter' not in existing_columns:
            session.execute(text('ALTER TABLE users ADD COLUMN reset_counter INTEGER DEFAULT 0'))
            print("‚úÖ Added reset_counter column")
            
        if 'reset_type' not in existing_columns:
            session.execute(text('ALTER TABLE users ADD COLUMN reset_type TEXT DEFAULT "daily"'))
            print("‚úÖ Added reset_type column")
            
        if 'used_promo_codes' not in existing_columns:
            session.execute(text('ALTER TABLE users ADD COLUMN used_promo_codes TEXT DEFAULT "[]"'))
            print("‚úÖ Added used_promo_codes column")
        
        session.commit()
        print("‚úÖ Simple migration completed")
        
    except Exception as e:
        print(f"‚ùå Migration failed: {e}")
        session.rollback()
        raise
    finally:
        session.close()

# –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
if __name__ == "__main__":
    simple_migrate()