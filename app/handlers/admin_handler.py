from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandObject
from app.config import RequestConfig, ADMIN_ID
from app.services.promo_service import PromoService
from app.db.database import SessionLocal, add_paid_requests
from app.db.models import PromoCode
from datetime import datetime, timedelta
import logging

admin_router = Router()
logger = logging.getLogger(__name__)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id == ADMIN_ID

@admin_router.message(Command("admin"))
async def admin_panel(message: Message):
    """–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    await message.answer(
        "‚öôÔ∏è **–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å**\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/create_promo <–∑–∞–ø—Ä–æ—Å—ã> - –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥\n"
        "/list_promos - –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤\n"
        "/add_requests <user_id> <–∫–æ–ª-–≤–æ> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã\n"
        "/service_code - –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ–¥",
        parse_mode="Markdown"
    )

@admin_router.message(Command("service_code"))
async def service_code(message: Message):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞"""
    if not is_admin(message.from_user.id):
        return
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω—É
    new_balance = add_paid_requests(message.from_user.id, RequestConfig.SERVICE_CODE_REQUESTS)
    
    await message.answer(
        f"üéØ **–°–µ—Ä–≤–∏—Å–Ω—ã–π –∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {RequestConfig.SERVICE_CODE_REQUESTS} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {new_balance} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
    )

@admin_router.message(Command("create_promo"))
async def create_promo(message: Message, command: CommandObject):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if not is_admin(message.from_user.id):
        return
    
    # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    if not command.args:
        requests = RequestConfig.PROMO_CODE_REQUESTS
    else:
        try:
            requests = int(command.args)
        except ValueError:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /create_promo <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–∑–∞–ø—Ä–æ—Å–æ–≤> –∏–ª–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return
    
    db = SessionLocal()
    
    try:
        promo = PromoService.create_promo_code(db, requests, message.from_user.id)
        
        expires_str = promo.expires_at.strftime("%d.%m.%Y %H:%M")
        
        await message.answer(
            f"üé´ **–ü—Ä–æ–º–æ–∫–æ–¥ —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üìù –ö–æ–¥: `{promo.code}`\n"
            f"üéÅ –ó–∞–ø—Ä–æ—Å–æ–≤: {promo.requests}\n"
            f"‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expires_str}\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç {promo.requests} –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error creating promo: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    finally:
        db.close()

@admin_router.message(Command("add_requests"))
async def add_requests_admin(message: Message, command: CommandObject):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if not is_admin(message.from_user.id):
        return
    
    if not command.args:
        await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_requests <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
        return
    
    try:
        args = command.args.split()
        if len(args) != 2:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /add_requests <user_id> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")
            return
        
        user_id = int(args[0])
        requests = int(args[1])
        
        new_balance = add_paid_requests(user_id, requests)
        
        await message.answer(
            f"‚úÖ **–ó–∞–ø—Ä–æ—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}\n"
            f"üéÅ –î–æ–±–∞–≤–ª–µ–Ω–æ: {requests} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance}"
        )
        
    except Exception as e:
        logger.error(f"Error adding requests: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤")

@admin_router.message(Command("stats"))
async def show_stats(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not is_admin(message.from_user.id):
        return
    
    from app.db.database import SessionLocal
    from app.db.models import User, PromoCode
    from sqlalchemy import func
    
    db = SessionLocal()
    try:
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db.query(User).count()
        active_today = db.query(User).filter(
            User.last_reset == datetime.now().date()
        ).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
        total_promos = db.query(PromoCode).count()
        used_promos = db.query(PromoCode).filter(PromoCode.used_by.isnot(None)).count()
        active_promos = db.query(PromoCode).filter(
            PromoCode.is_active == True,
            PromoCode.used_by.is_(None)
        ).count()
        
        await message.answer(
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:**\n\n"
            f"üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: {active_today}\n\n"
            f"üé´ **–ü—Ä–æ–º–æ–∫–æ–¥—ã:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {total_promos}\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_promos}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_promos}\n\n"
            f"‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {RequestConfig.FREE_REQUESTS_DAILY if RequestConfig.RESET_TYPE == 'daily' else RequestConfig.FREE_REQUESTS_WEEKLY} ({RequestConfig.RESET_TYPE})\n"
            f"‚Ä¢ –¢–∞—Ä–∏—Ñ–æ–≤: {len(RequestConfig.PRICING)}",
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error getting stats: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    finally:
        db.close()