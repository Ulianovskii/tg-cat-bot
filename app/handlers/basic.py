# app/handlers/basic.py

from aiogram import types, F
from aiogram.filters import Command, CommandStart
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from datetime import date
import logging
import random

from app.bot_instance import dp
from app.db.database import SessionLocal
from app.db.models import UserLimit
from app.services.cat_analyzer import cat_analyzer

MAX_REQUESTS = 10
logger = logging.getLogger(__name__)

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_last_photos = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å 3 –∫–Ω–æ–ø–∫–∞–º–∏
MAIN_MENU_KEYBOARD = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç", callback_data="check_limit")],
        [InlineKeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –ª–∏–º–∏—Ç", callback_data="topup_limit")],
        [InlineKeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å –∫–æ—Ç–∏–∫–∞", callback_data="rate_cat")]
    ]
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ
photo_received_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –æ—Ü–µ–Ω–∫–∏
after_rating_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start -----------------
@dp.message(CommandStart())
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±–æ—Ç —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—à–∏—Å—Ç–æ—Å—Ç—è–º üòä\n"
        "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É '–æ—Ü–µ–Ω–∏—Ç—å –∫–æ—Ç–∏–∫–∞', —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ –∫–æ—Ç–∏—Å—Ç–æ—Å—Ç–∏ –∫–æ—Ç–∏–∫–∞",
        reply_markup=MAIN_MENU_KEYBOARD
    )

# ----------------- Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ -----------------

@dp.callback_query(lambda c: c.data == "check_limit")
async def check_limit_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    today = date.today()

    with SessionLocal() as db:
        user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()

        if not user:
            remaining = MAX_REQUESTS
        else:
            if user.last_reset < today:
                user.used_requests = 0
                user.last_reset = today
                db.commit()
            remaining = MAX_REQUESTS - user.used_requests

        await callback.message.answer(f"–£ —Ç–µ–±—è –æ—Å—Ç–∞–ª–æ—Å—å {remaining} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "topup_limit")
async def topup_limit_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –Ω–∞ 10 –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 'cat lover' —á—Ç–æ–±—ã —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç"
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data == "rate_cat")
async def rate_cat_handler(callback: types.CallbackQuery):
    await callback.message.answer(
        "–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏! üì∏\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏ '–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞'",
        reply_markup=ReplyKeyboardRemove()
    )
    await callback.answer()

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "cat lover" -----------------
@dp.message(lambda message: message.text and message.text.lower() == "cat lover")
async def reset_limit_handler(message: Message):
    user_id = message.from_user.id
    today = date.today()

    with SessionLocal() as db:
        user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
        
        if not user:
            user = UserLimit(user_id=user_id, last_reset=today, used_requests=0)
            db.add(user)
        else:
            user.used_requests = 0
            user.last_reset = today
        
        db.commit()

    await message.answer("‚úÖ –õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω! –£ —Ç–µ–±—è —Å–Ω–æ–≤–∞ 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤!")

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ -----------------
@dp.message(F.photo)
async def handle_photo_directly(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    logger.info(f"‚úÖ Photo received from user {user_id}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        user_last_photos[user_id] = photo.file_id
        
        await message.answer(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ù–∞–∂–º–∏ '–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üê±",
            reply_markup=photo_received_keyboard
        )
    except Exception as e:
        logger.error(f"‚ùå Error saving photo: {e}")
        await message.answer("–û–π! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòø")

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞" -----------------
@dp.message(F.text == "–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
async def analyze_photo_directly(message: Message):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    today = date.today()
    
    logger.info(f"üîç Analyze photo button pressed by user {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    if user_id not in user_last_photos:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞! üì∏")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    with SessionLocal() as db:
        user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
        
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π –ª–∏–º–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!")
            return
        
        if user.last_reset < today:
            user.used_requests = 0
            user.last_reset = today
            db.commit()
        
        if user.used_requests >= MAX_REQUESTS:
            await message.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞! üêæ")
            return
    
    try:
        processing_msg = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ—Ç–∏–∫–∞... üîç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        file_id = user_last_photos[user_id]
        from app.bot_instance import bot
        file = await bot.get_file(file_id)
        photo_bytes = await bot.download_file(file.file_path)
        
        logger.info(f"‚úÖ Photo downloaded for analysis, size: {len(photo_bytes.getvalue())} bytes")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        analysis_result = await cat_analyzer.analyze_cat_image(photo_bytes.getvalue())
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        with SessionLocal() as db:
            user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
            if user:
                user.used_requests += 1
                db.commit()
                remaining = MAX_REQUESTS - user.used_requests
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
        del user_last_photos[user_id]
        
        await processing_msg.delete()
        await message.answer(
            f"{analysis_result}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}",
            reply_markup=after_rating_keyboard
        )
        logger.info(f"‚úÖ Photo analyzed successfully for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error analyzing photo: {e}")
        await message.answer("–û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòø", reply_markup=photo_received_keyboard)

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞" -----------------
@dp.message(F.text == "–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
async def rate_another_cat_handler(message: Message):
    """–ù–∞—á–∞—Ç—å –æ—Ü–µ–Ω–∫—É –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞"""
    user_id = message.from_user.id
    today = date.today()
    
    logger.info(f"üîÑ User {user_id} wants to rate another cat")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    with SessionLocal() as db:
        user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
        
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π –ª–∏–º–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KEYBOARD)
            return
        
        if user.last_reset < today:
            user.used_requests = 0
            user.last_reset = today
            db.commit()
        
        if user.used_requests >= MAX_REQUESTS:
            await message.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞! üêæ", reply_markup=ReplyKeyboardRemove())
            await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KEYBOARD)
            return
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä–æ–µ —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
    if user_id in user_last_photos:
        del user_last_photos[user_id]
    
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–æ—Ç–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏! üì∏\n\n"
        "–ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏ '–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞'",
        reply_markup=ReplyKeyboardRemove()
    )

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é" -----------------
@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
async def back_to_menu_directly(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    if user_id in user_last_photos:
        del user_last_photos[user_id]
    
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é! üè†", reply_markup=ReplyKeyboardRemove())
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KEYBOARD)

# ----------------- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ -----------------
@dp.message()
async def handle_user_request(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ - –Ω–µ —Å–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã"""
    if message.text and not message.text.startswith('/'):
        responses = [
            "–Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ –∫–æ—Ç–∏–∫–æ–≤",
            "–ü—Ä–µ–¥–ª–∞–≥–∞—é –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø—É—à–∏—à–∞–º", 
            "–ú–æ–≥—É –¥–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ –º—è—É—á–∫–µ",
            "–û–∂–∏–¥–∞—é –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ç–µ–π—à–µ—Å—Ç–≤–∞",
            "–ö–æ—Ç–∏–∫–∞–º –≤—Ä–µ–º—è –∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∞–º —á–∞—Å"
        ]
        response = random.choice(responses)
        await message.answer(response)

# ----------------- –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ -----------------
@dp.callback_query()
async def debug_callback_handler(callback: types.CallbackQuery):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback"""
    print(f"DEBUG: Callback received: {callback.data}")
    await callback.answer(f"Callback: {callback.data}")