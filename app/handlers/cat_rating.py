# app/handlers/cat_rating.py
from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from app.services.cat_analyzer import cat_analyzer
from app.bot_instance import bot
from app.db.database import SessionLocal
from app.db.models import UserLimit
from datetime import date
import logging

logger = logging.getLogger(__name__)

cat_router = Router()
MAX_REQUESTS = 10

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π {user_id: file_id}
user_last_photos = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ
photo_received_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å –∫–æ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

@cat_router.message(F.photo)
async def handle_cat_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞"""
    user_id = message.from_user.id
    logger.info(f"‚úÖ Photo received from user {user_id}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        user_last_photos[user_id] = photo.file_id
        
        await message.answer(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=photo_received_keyboard
        )
        logger.info(f"‚úÖ Photo saved for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error saving photo: {e}")
        await message.answer("üòø –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=main_menu_keyboard)

@cat_router.message(F.text == "–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
async def analyze_current_photo(message: Message):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å"""
    user_id = message.from_user.id
    today = date.today()
    
    logger.info(f"üîç Analyze current photo by user {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    if user_id not in user_last_photos:
        await message.answer("üì∏ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞!", reply_markup=main_menu_keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    with SessionLocal() as db:
        user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
        
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π –ª–∏–º–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", reply_markup=main_menu_keyboard)
            return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–∏–º–∏—Ç –µ—Å–ª–∏ –Ω–æ–≤—ã–π –¥–µ–Ω—å
        if user.last_reset < today:
            user.used_requests = 0
            user.last_reset = today
            db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
        if user.used_requests >= MAX_REQUESTS:
            await message.answer("üòø –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞! üêæ", reply_markup=main_menu_keyboard)
            return
    
    try:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        processing_msg = await message.answer("üîç –ù–µ–π—Ä–æ—Å–µ—Ç—å –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—Ç–∏–∫–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        file_id = user_last_photos[user_id]
        file = await bot.get_file(file_id)
        photo_bytes = await bot.download_file(file.file_path)
        
        logger.info(f"‚úÖ Photo downloaded for analysis, size: {len(photo_bytes.getvalue())} bytes")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
        analysis_result = await cat_analyzer.analyze_cat_image(photo_bytes.getvalue())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
        with SessionLocal() as db:
            user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
            if user:
                user.used_requests += 1
                db.commit()
                remaining = MAX_REQUESTS - user.used_requests
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º"
        await processing_msg.delete()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        await message.answer(
            f"üò∏ {analysis_result}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}",
            reply_markup=main_menu_keyboard
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        del user_last_photos[user_id]
        
        logger.info(f"‚úÖ Photo analyzed successfully for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error analyzing photo: {e}")
        await message.answer("üòø –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=main_menu_keyboard)

@cat_router.message(F.text == "–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
async def analyze_different_photo(message: Message):
    """–ó–∞–ø—Ä–æ—Å –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Ñ–æ—Ç–æ
    if user_id in user_last_photos:
        del user_last_photos[user_id]
    
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏!",
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"üîÑ User {user_id} requested new photo")

@cat_router.message(F.text == "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
    if user_id in user_last_photos:
        del user_last_photos[user_id]
    
    await message.answer(
        "üè† –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!",
        reply_markup=main_menu_keyboard
    )
    logger.info(f"üè† User {user_id} returned to main menu")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é "–û—Ü–µ–Ω–∏—Ç—å –∫–æ—Ç–∏–∫–∞"
@cat_router.message(F.text == "–û—Ü–µ–Ω–∏—Ç—å –∫–æ—Ç–∏–∫–∞")
async def start_cat_rating(message: Message):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ü–µ–Ω–∫–∏ –∫–æ—Ç–∏–∫–∞"""
    await message.answer(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏!",
        reply_markup=ReplyKeyboardRemove()
    )
    logger.info(f"üì∏ User {user_id} started cat rating process")