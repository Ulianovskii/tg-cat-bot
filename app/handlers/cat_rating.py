# app/handlers/cat_rating.py
from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from app.bot_instance import bot
from app.db.database import SessionLocal
from app.db.models import UserLimit
from datetime import date
import logging
from app.services.openai_analyzer import analyze_cat_image

logger = logging.getLogger(__name__)

cat_router = Router()
MAX_REQUESTS = 10

user_last_photos = {}

photo_received_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ –∫–æ—Ç–∏–∫–∞")]
    ],
    resize_keyboard=True
)

main_menu_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å –∫–æ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")],
        [KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

@cat_router.message(F.photo)
async def handle_cat_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞"""
    user_id = message.from_user.id
    logger.info(f"‚úÖ Photo received from user {user_id}")
    
    try:
        photo = message.photo[-1]
        user_last_photos[user_id] = photo.file_id
        
        await message.answer(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=photo_received_keyboard
        )
        logger.info(f"‚úÖ Photo saved for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error saving photo: {e}")
        await message.answer("üòø –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=main_menu_keyboard)

@cat_router.message(F.text == "–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
async def analyze_current_photo(message: Message):
    """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å"""
    user_id = message.from_user.id
    today = date.today()
    
    logger.info(f"üîç Analyze current photo by user {user_id}")
    
    if user_id not in user_last_photos:
        await message.answer("üì∏ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞!", reply_markup=main_menu_keyboard)
        return
    
    with SessionLocal() as db:
        user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
        