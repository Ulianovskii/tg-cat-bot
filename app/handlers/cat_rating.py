# app/handlers/cat_rating.py
from aiogram import F, Router
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from app.services.cat_analyzer import cat_analyzer
from app.db.database import SessionLocal
from app.db.models import UserLimit
from datetime import date
import logging

logger = logging.getLogger(__name__)

cat_router = Router()
MAX_REQUESTS = 10

user_last_photos = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
empty_rating_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")]],
    resize_keyboard=True
)

photo_received_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞")],
        [KeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")]
    ],
    resize_keyboard=True
)

# –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@cat_router.message(F.photo)
async def handle_photo(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    logger.info(f"‚úÖ Photo received from user {user_id}")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º file_id –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
        photo = message.photo[-1]
        user_last_photos[user_id] = photo.file_id
        
        await message.answer(
            "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ! –ù–∞–∂–º–∏ '–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ üê±",
            reply_markup=photo_received_keyboard
        )
        logger.info(f"‚úÖ Photo saved for user {user_id}, keyboard sent")
    except Exception as e:
        logger.error(f"‚ùå Error saving photo: {e}")
        await message.answer("–û–π! –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòø", reply_markup=empty_rating_keyboard)

@cat_router.message(F.text == "–û—Ü–µ–Ω–∏—Ç—å —ç—Ç–æ–≥–æ –∫–æ—Ç–∏–∫–∞")
async def analyze_photo(message: Message):
    """–ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
    user_id = message.from_user.id
    today = date.today()
    
    logger.info(f"üîç Analyze photo button pressed by user {user_id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ
    if user_id not in user_last_photos:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞! üì∏", reply_markup=empty_rating_keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
    with SessionLocal() as db:
        user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
        
        if not user:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–∏—Ä—É–π –ª–∏–º–∏—Ç –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é!", reply_markup=empty_rating_keyboard)
            return
        
        if user.last_reset < today:
            user.used_requests = 0
            user.last_reset = today
            db.commit()
        
        if user.used_requests >= MAX_REQUESTS:
            await message.answer("–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞! üêæ", reply_markup=empty_rating_keyboard)
            return
    
    try:
        processing_msg = await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ—Ç–∏–∫–∞... üîç")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        file_id = user_last_photos[user_id]
        from app.bot_instance import bot
        file = await bot.get_file(file_id)
        photo_bytes = await bot.download_file(file.file_path)
        
        logger.info(f"‚úÖ Photo downloaded for analysis, size: {len(photo_bytes.getvalue())} bytes")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
        analysis_result = await cat_analyzer.analyze_cat_image(photo_bytes.getvalue())
        
        # –°–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        with SessionLocal() as db:
            user = db.query(UserLimit).filter(UserLimit.user_id == user_id).first()
            if user:
                user.used_requests += 1
                db.commit()
                remaining = MAX_REQUESTS - user.used_requests
        
        # –£–¥–∞–ª—è–µ–º —Ñ–æ—Ç–æ
        del user_last_photos[user_id]
        
        await processing_msg.delete()
        await message.answer(
            f"{analysis_result}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∑–∞–ø—Ä–æ—Å–æ–≤: {remaining}",
            reply_markup=empty_rating_keyboard
        )
        logger.info(f"‚úÖ Photo analyzed successfully for user {user_id}")
        
    except Exception as e:
        logger.error(f"‚ùå Error analyzing photo: {e}")
        await message.answer("–û–π! –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑! üòø", reply_markup=empty_rating_keyboard)

@cat_router.message(F.text == "–ü–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é")
async def back_to_menu(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = message.from_user.id
    if user_id in user_last_photos:
        del user_last_photos[user_id]
    
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é!", reply_markup=ReplyKeyboardRemove())
    from app.handlers.basic import MAIN_MENU_KEYBOARD
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=MAIN_MENU_KEYBOARD)

# –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–æ—É—Ç–µ—Ä–µ
@cat_router.message()
async def debug_all_messages(message: Message):
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–æ—É—Ç–µ—Ä–µ"""
    logger.info(f"DEBUG: Message in cat_router: '{message.text}' from user {message.from_user.id}")