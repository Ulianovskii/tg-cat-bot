# app/handlers/payment_handler.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice, SuccessfulPayment
from aiogram.filters import Command
import logging
import random
import string
from datetime import datetime, timedelta
from sqlalchemy.orm import Session
from app.db.database import get_user, update_user_balance, add_paid_requests
from app.config import RequestConfig, get_pricing_display, get_free_requests_info
from app.services.promo_service import PromoService
from app.db.models import PromoCode
import logging

payment_router = Router()
logger = logging.getLogger(__name__)

class PromoService:
    
    @staticmethod
    def generate_promo_code(length: int = None) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        if length is None:
            length = RequestConfig.PROMO_CODE_LENGTH
        
        characters = string.ascii_uppercase + string.digits
        return ''.join(random.choice(characters) for _ in range(length))
    
    @staticmethod
    def create_promo_code(db: Session, requests: int, created_by: int, days_valid: int = None):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        if days_valid is None:
            days_valid = RequestConfig.PROMO_CODE_DURATION_DAYS
        
        code = PromoService.generate_promo_code()
        expires_at = datetime.now() + timedelta(days=days_valid)
        
        promo = PromoCode(
            code=code,
            requests=requests,
            created_by=created_by,
            expires_at=expires_at
        )
        
        db.add(promo)
        db.commit()
        db.refresh(promo)
        
        logger.info(f"Created promo code: {code} for {requests} requests")
        return promo
    
    @staticmethod
    def use_promo_code(db: Session, code: str, user_id: int):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        promo = db.query(PromoCode).filter(
            PromoCode.code == code,
            PromoCode.is_active == True
        ).first()
        
        if not promo:
            return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        if promo.used_by is not None:
            return False, "–ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω"
        
        if promo.expires_at < datetime.now():
            return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫"
        
        # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        promo.used_by = user_id
        promo.used_at = datetime.now()
        promo.is_active = False
        
        db.commit()
        
        logger.info(f"User {user_id} used promo code: {code}")
        return True, promo.requests
    
    @staticmethod
    def get_active_promos(db: Session):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
        return db.query(PromoCode).filter(
            PromoCode.is_active == True,
            PromoCode.used_by.is_(None),
            PromoCode.expires_at > datetime.now()
        ).all()


@payment_router.message(Command("replenish"))
async def replenish_balance(message: Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stars"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    keyboard = []
    row = []
    
    for i, (stars, requests) in enumerate(RequestConfig.PRICING.items()):
        button = InlineKeyboardButton(
            text=f"{stars} ‚≠ê - {requests} –∑–∞–ø—Ä–æ—Å–æ–≤", 
            callback_data=f"buy_{stars}"
        )
        row.append(button)
        
        if len(row) == 2 or i == len(RequestConfig.PRICING.items()) - 1:
            keyboard.append(row)
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
    keyboard.append([InlineKeyboardButton(text="üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="enter_promo")])
    
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        f"üí´ **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã:**\n{get_pricing_display()}\n\n"
        f"{get_free_requests_info()}\n"
        f"{get_promo_info()}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

@payment_router.callback_query(F.data == "enter_promo")
async def enter_promo_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    await callback.message.answer(
        "üéÅ **–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:**\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ø—Ä–æ–º–æ–∫–æ–¥, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã!"
    )
    await callback.answer()

@payment_router.message(F.text & ~F.text.startswith('/'))
async def handle_promo_code(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    from app.db.database import SessionLocal
    
    promo_code = message.text.strip().upper()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –ø—Ä–æ–º–æ–∫–æ–¥–∞
    if len(promo_code) != RequestConfig.PROMO_CODE_LENGTH:
        return  # –ù–µ –ø—Ä–æ–º–æ–∫–æ–¥
    
    db = SessionLocal()
    try:
        success, result = PromoService.use_promo_code(db, promo_code, message.from_user.id)
        
        if success:
            requests_added = result
            new_balance = add_paid_requests(message.from_user.id, requests_added)
            
            await message.answer(
                f"üéâ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**\n\n"
                f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ: {requests_added} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                f"üí∞ –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_balance} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞! üéÅ"
            )
        else:
            await message.answer(f"‚ùå {result}")
            
    except Exception as e:
        logger.error(f"Error processing promo code: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
    finally:
        db.close()

@payment_router.callback_query(F.data.startswith("buy_"))
async def handle_buy_callback(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Å Stars"""
    try:
        stars_count = int(callback.data.replace("buy_", ""))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞—Ä–∏—Ñ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        if stars_count not in RequestConfig.PRICING:
            await callback.answer("‚ùå –¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        requests_count = RequestConfig.PRICING[stars_count]
        
        await callback.bot.send_invoice(
            chat_id=callback.message.chat.id,
            title=f"–ü–∞–∫–µ—Ç {requests_count} –∑–∞–ø—Ä–æ—Å–æ–≤",
            description=f"{requests_count} AI –∞–Ω–∞–ª–∏–∑–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∫–æ—Ç–∏–∫–æ–≤",
            payload=f"stars_{stars_count}_{callback.from_user.id}",
            provider_token="",
            currency="XTR",
            prices=[LabeledPrice(label="Stars", amount=stars_count)],
            start_parameter="cat_ai_analyzer",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            is_flexible=False
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error creating invoice: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@payment_router.pre_checkout_query()
async def precheckout_handler(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)

@payment_router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Stars"""
    try:
        payment = message.successful_payment
        payload = payment.invoice_payload
        user_id = message.from_user.id
        
        logger.info(f"Processing payment: {payload} for user {user_id}")
        
        parts = payload.split('_')
        if len(parts) >= 3:
            stars_count = int(parts[1])
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            requests_granted = RequestConfig.PRICING.get(stars_count, stars_count // 5)
            
            user = get_user(user_id)
            logger.info(f"User found: ID={user.id}, Paid={user.paid_requests}")
            
            new_balance = add_paid_requests(user_id, requests_granted)
            
            await message.answer(
                f"‚úÖ **–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!**\n\n"
                f"üéÅ –ü–æ–ª—É—á–µ–Ω–æ: {requests_granted} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                f"üí´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {stars_count} Stars\n"
                f"üí∞ –ë–∞–ª–∞–Ω—Å: {new_balance} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞! üê±"
            )
            
            logger.info(f"Added {requests_granted} requests to user {user_id}")
                
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        logger.error(f"‚ùå Error processing payment: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

@payment_router.message(Command("balance"))
async def check_balance(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user = get_user(message.from_user.id)
    
    reset_info = "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ" if RequestConfig.RESET_TYPE == "daily" else "–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
    max_free = RequestConfig.FREE_REQUESTS_DAILY if RequestConfig.RESET_TYPE == "daily" else RequestConfig.FREE_REQUESTS_WEEKLY
    
    await message.answer(
        f"üí∞ **–í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞–ø—Ä–æ—Å–æ–≤:**\n\n"
        f"‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {user.free_requests}/{max_free} (—Å–±—Ä–æ—Å {reset_info})\n"
        f"‚Ä¢ üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {user.paid_requests}\n"
        f"‚Ä¢ üìä –í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user.total_requests_used}\n"
        f"‚Ä¢ üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–±—Ä–æ—Å: {user.last_reset}",
        parse_mode="Markdown"
    )