# app/handlers/payment_handler.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice, SuccessfulPayment
from aiogram.filters import Command
from app.db.database import get_user, update_user_balance
import logging

payment_router = Router()
logger = logging.getLogger(__name__)


@payment_router.message(Command("replenish"))
async def replenish_balance(message: Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stars"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = [
        [
            InlineKeyboardButton(text="15 ‚≠ê - 3 –∑–∞–ø—Ä–æ—Å–∞", callback_data="buy_15"),
            InlineKeyboardButton(text="45 ‚≠ê - 10 –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="buy_45"),
        ],
        [
            InlineKeyboardButton(text="80 ‚≠ê - 20 –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="buy_80"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

@payment_router.callback_query(F.data.startswith("buy_"))
async def handle_buy_callback(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Å Stars"""
    packages = {
        "buy_15": {"stars": 15, "requests": 3, "title": "15 –∑–≤–µ–∑–¥ - 3 –∑–∞–ø—Ä–æ—Å–∞"},
        "buy_45": {"stars": 45, "requests": 10, "title": "45 –∑–≤–µ–∑–¥ - 10 –∑–∞–ø—Ä–æ—Å–æ–≤"}, 
        "buy_80": {"stars": 80, "requests": 20, "title": "80 –∑–≤–µ–∑–¥ - 20 –∑–∞–ø—Ä–æ—Å–æ–≤"}
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—â–∏—Ç—É –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
    if callback.data not in packages:
        await callback.answer(f"‚ùå –ü–∞–∫–µ—Ç {callback.data} –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    selected_package = packages[callback.data]
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã Stars
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=(
                f"üí´ **{selected_package['title']}**\n"
                f"üìä –ü–æ–ª—É—á–∏—Ç–µ {selected_package['requests']} –∑–∞–ø—Ä–æ—Å–æ–≤\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {selected_package['stars']} ‚≠ê\n\n"
                f"–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            ),
            reply_markup={
                "inline_keyboard": [[{
                    "text": f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {selected_package['stars']} ‚≠ê",
                    "pay": True
                }]]
            }
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error sending payment message: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@payment_router.pre_checkout_query()
async def precheckout_handler(pre_checkout_query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout_query.answer(ok=True)

@payment_router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Stars"""
    try:
        payment = message.successful_payment
        payload = payment.invoice_payload
        user_id = message.from_user.id
        
        logger.info(f"Processing payment: {payload} for user {user_id}")
        
        # –ü–∞—Ä—Å–∏–º payload: stars_15_123456789
        parts = payload.split('_')
        if len(parts) >= 3:
            stars_count = int(parts[1])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è)
            requests_granted = 0
            if stars_count == 15:
                requests_granted = 3
            elif stars_count == 45:
                requests_granted = 10  
            elif stars_count == 80:
                requests_granted = 20
            else:
                requests_granted = stars_count // 5  # fallback
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = get_user(user_id)
            logger.info(f"User found: ID={user.id}, TG_ID={user.tg_id}, Paid={user.paid_requests}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            new_balance = user.paid_requests + requests_granted
            update_user_balance(user_id, new_balance)
            
            await message.answer(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–ª—É—á–µ–Ω–æ {requests_granted} –∑–∞–ø—Ä–æ—Å–æ–≤!\n"
                f"üí´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {stars_count} Stars\n"
                f"üìä –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_balance} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
            
            logger.info(f"Successfully added {requests_granted} requests to user {user_id}. New balance: {new_balance}")
                
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        logger.error(f"‚ùå Error processing payment: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

@payment_router.message(Command("balance"))
async def check_balance(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∑–∞–ø—Ä–æ—Å–æ–≤"""
    user_id = message.from_user.id
    user = get_user(user_id)
    
    await message.answer(
        f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –∑–∞–ø—Ä–æ—Å–æ–≤:\n"
        f"‚Ä¢ üÜì –ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {user.free_requests}\n"
        f"‚Ä¢ üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö: {user.paid_requests}\n"
        f"‚Ä¢ üìÖ –°–±—Ä–æ—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö: {user.last_reset}"
    )