# app/handlers/payment_handler.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, PreCheckoutQuery, LabeledPrice, SuccessfulPayment
from aiogram.filters import Command
from app.db.database import get_user, update_user_balance
import logging

payment_router = Router()

logger = logging.getLogger(__name__)

@payment_router.message(Command("replenish"))
async def replenish_balance(message: Message):
    """–ü–æ–∫–∞–∑ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stars"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    keyboard = [
        [
            InlineKeyboardButton(text="3 ‚≠ê - 10 –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="buy_3"),
            InlineKeyboardButton(text="10 ‚≠ê - 35 –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="buy_10"),
        ],
        [
            InlineKeyboardButton(text="20 ‚≠ê - 100 –∑–∞–ø—Ä–æ—Å–æ–≤", callback_data="buy_20"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=reply_markup
    )

@payment_router.callback_query(F.data.startswith("buy_"))
async def handle_buy_callback(callback: CallbackQuery):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–≤–æ–π—Å–∞ —Å Stars"""
    packages = {
        "buy_15": {"stars": 15, "requests": 3, "title": "15 –∑–≤–µ–∑–¥ - 3 –∑–∞–ø—Ä–æ—Å–∞"},
        "buy_45": {"stars": 45, "requests": 10, "title": "45 –∑–≤–µ–∑–¥ - 10 –∑–∞–ø—Ä–æ—Å–æ–≤"}, 
        "buy_80": {"stars": 80, "requests": 20, "title": "80 –∑–≤–µ–∑–¥ - 20 –∑–∞–ø—Ä–æ—Å–æ–≤"}
    }
    
    selected_package = packages[callback.data]
    
    prices = [LabeledPrice(
        label=selected_package['title'],
        amount=selected_package['stars']  # ‚Üê –ë–ï–ó * 100 –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    )]
    
    await callback.bot.send_invoice(
        chat_id=callback.message.chat.id,
        title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - {selected_package['title']}",
        description=f"–ü–æ–ª—É—á–∏—Ç–µ {selected_package['requests']} –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ {selected_package['stars']} ‚≠ê",
        payload=f"stars_{selected_package['stars']}_{callback.from_user.id}",
        provider_token="",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è Stars
        currency="XTR",     # –í–∞–ª—é—Ç–∞ Telegram Stars
        prices=prices,
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
        is_flexible=False,
    )
    
    await callback.answer()

@payment_router.pre_checkout_query()
async def precheckout_handler(pre_checkout_query: PreCheckoutQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞"""
    await pre_checkout_query.answer(ok=True)

@payment_router.message(F.successful_payment)
async def successful_payment_handler(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ Stars"""
    try:
        payment = message.successful_payment
        payload = payment.invoice_payload
        
        # –ü–∞—Ä—Å–∏–º payload: stars_3_123456789
        parts = payload.split('_')
        if len(parts) >= 3:
            stars_count = int(parts[1])
            user_id = int(parts[2])
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∑–≤–µ–∑–¥
            requests_granted = 0
            if stars_count == 3:
                requests_granted = 10
            elif stars_count == 10:
                requests_granted = 35
            elif stars_count == 20:
                requests_granted = 100
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user = get_user(user_id)
            new_balance = user.paid_requests + requests_granted
            update_user_balance(user_id, new_balance)
            
            await message.answer(
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! –ü–æ–ª—É—á–µ–Ω–æ {requests_granted} –∑–∞–ø—Ä–æ—Å–æ–≤!\n"
                f"üí´ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {stars_count} Stars\n"
                f"üìä –¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {new_balance} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞")
            
    except Exception as e:
        logger.error(f"‚ùå Error processing payment: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")