# app/handlers/photo_handler.py
from aiogram import types
from aiogram.dispatcher.router import Router
from app.bot_instance import bot
from app.services.cat_analyzer import analyze_cat_image
import logging

logger = logging.getLogger(__name__)
router = Router()  # ‚Üê –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ß–ö–£!

@router.message(lambda message: message.photo is not None)
async def handle_cat_photo(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞"""
    try:
        await message.answer("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ—Ç–∏–∫–∞...")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ
        file_info = await bot.get_file(photo.file_id)
        downloaded_file = await bot.download_file(file_info.file_path)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å
        analysis_result = await analyze_cat_image(downloaded_file.read())
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
        await message.answer(f"üò∏ {analysis_result}")
        
    except Exception as e:
        logger.error(f"Error processing cat photo: {e}")
        await message.answer("üòø –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!")