# app/services/cat_analyzer.py
import aiohttp
import logging
import random
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
load_dotenv()

HUGGINGFACE_API_KEY = os.getenv("HUGGINGFACE_API_KEY", "")
logger = logging.getLogger(__name__)

class CatAnalyzer:
    def __init__(self, huggingface_api_key: str = HUGGINGFACE_API_KEY):
        self.huggingface_api_key = huggingface_api_key
        self.base_url = "https://api-inference.huggingface.co/models"
        logger.info(f"CatAnalyzer initialized. API key: {bool(self.huggingface_api_key)}")
        
    async def analyze_cat_image(self, image_data: bytes) -> str:
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ Hugging Face API
        """
        try:
            logger.info("Starting real cat image analysis with HuggingFace...")
            logger.info(f"Image size: {len(image_data)} bytes")
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            description = await self._get_image_description(image_data)
            logger.info(f"HuggingFace raw result: {description}")
            
            # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            if not description or description == "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ":
                logger.warning("HuggingFace API returned empty description, using fallback")
                return self._get_fallback_response()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∫–æ—Ç–∏–∫
            is_cat = self._is_cat_description(description)
            if not is_cat:
                return self._get_not_cat_response(description)
            
            # –°–æ–∑–¥–∞–µ–º —Å–º–µ—à–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            funny_comment = self._create_funny_comment(description)
            return funny_comment
            
        except Exception as e:
            logger.error(f"Error analyzing image: {e}")
            return self._get_fallback_response()
    
    async def _get_image_description(self, image_data: bytes) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
        # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å - —Å–∞–º–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è
        model = "Salesforce/blip-image-captioning-base"
        
        try:
            logger.info(f"Querying model: {model}")
            result = await self._query_huggingface(model, image_data)
            
            if result and isinstance(result, list) and len(result) > 0:
                if "error" in result:
                    logger.warning(f"Model error: {result['error']}")
                    return "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                
                description = result[0].get('generated_text', '')
                logger.info(f"Model returned: {description}")
                return description
            else:
                logger.warning("Empty result from model")
                return "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                
        except Exception as e:
            logger.error(f"Model query failed: {e}")
            return "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
    
    def _is_cat_description(self, description: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫–æ—Ç–∏–∫—É"""
        description_lower = description.lower()
        
        cat_keywords = ['cat', 'kitten', 'kitty', 'feline', '–∫–æ—à–∫–∞', '–∫–æ—Ç', '–∫–æ—Ç–∏–∫', '–∫–æ—Ç–µ–Ω–æ–∫']
        dog_keywords = ['dog', 'puppy', '—Å–æ–±–∞–∫–∞', '–ø—ë—Å', '—â–µ–Ω–æ–∫']
        
        # –ï—Å–ª–∏ —è–≤–Ω–æ —Å–æ–±–∞–∫–∞ - –Ω–µ –∫–æ—Ç–∏–∫
        if any(keyword in description_lower for keyword in dog_keywords):
            return False
            
        # –ï—Å–ª–∏ —è–≤–Ω–æ –∫–æ—Ç–∏–∫ - –∫–æ—Ç–∏–∫
        if any(keyword in description_lower for keyword in cat_keywords):
            return True
            
        # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –¥–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        return True
    
    def _get_not_cat_response(self, description: str) -> str:
        """–û—Ç–≤–µ—Ç –∫–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–µ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞"""
        responses = [
            f"–•–º... '{description}'. –≠—Ç–æ –Ω–µ –∫–æ—Ç–∏–∫! üö´ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–æ—Ç–∏–∫–∞!",
            f"'{description}' - –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ —è –∂–¥—É –∫–æ—Ç–∏–∫–∞! üòæ",
            f"–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ '{description}'. –Ø —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –∫–æ—Ç–∏–∫–∞—Ö! üê±"
        ]
        return random.choice(responses)
    
    def _create_funny_comment(self, description: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç —Å–º–µ—à–Ω–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"""
        # –û—á–∏—â–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –æ—Ç –ª–∏—à–Ω–µ–≥–æ
        clean_desc = description.replace('a', '').replace('A', '').strip()
        if not clean_desc:
            clean_desc = "–∫–æ—Ç–∏–∫"
            
        templates = [
            f"–ù–µ–π—Ä–æ—Å–µ—Ç—å –≤–∏–¥–∏—Ç: '{clean_desc}'. –Ø—Å–Ω–æ - —ç—Ç–æ –≥–µ–Ω–∏–∞–ª—å–Ω—ã–π –∫–æ—Ç–∏–∫! üß†",
            f"–ò–ò —Å–æ–æ–±—â–∞–µ—Ç: '{clean_desc}'. –ü–æ–¥–æ–∑—Ä–µ–≤–∞—é, –æ–Ω –∏—â–µ—Ç –≤–∫—É—Å–Ω—è—à–∫–∏! üçó",
            f"–ê–Ω–∞–ª–∏–∑: '{clean_desc}' - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º—É—Ä–ª—ã–∫–∞—Ç–µ–ª—å! üí´",
            f"–í–µ—Ä–¥–∏–∫—Ç: '{clean_desc}'. –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ–≥–ª–∞–¥–∏—Ç—å! ü§ó",
            f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: '{clean_desc}'. –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∏–ª–æ—Å—Ç–∏! üåü",
            f"–î–∞–Ω–Ω—ã–µ: '{clean_desc}'. –£—Ä–æ–≤–µ–Ω—å –æ—á–∞—Ä–æ–≤–∞–Ω–∏—è –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç! ‚ö°",
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ: '{clean_desc}'. –ú–∞—Å—Ç–µ—Ä –ø–æ —Ä–∞—Å—Ç–æ–ø–ª–µ–Ω–∏—é —Å–µ—Ä–¥–µ—Ü! üíò",
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: '{clean_desc}'. –í—ã—Å—à–∏–π –ø–∏–ª–æ—Ç–∞–∂ –∫–æ—à–∞—á–Ω–æ—Å—Ç–∏! üéØ"
        ]
        return random.choice(templates)
    
    def _get_fallback_response(self) -> str:
        """–ó–∞–ø–∞—Å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        responses = [
            "–í–∞—É! –≠—Ç–æ—Ç –∫–æ—Ç–∏–∫ —Å–ª–∏—à–∫–æ–º –º–∏–ª—ã–π! üê±",
            "–£—Ä–æ–≤–µ–Ω—å –æ—á–∞—Ä–æ–≤–∞–Ω–∏—è –∑–∞—à–∫–∞–ª–∏–≤–∞–µ—Ç! üí´",
            "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ –±—ã—Ç—å –º–∏–ª—ã–º! üéØ",
            "–û—Å–æ–±–µ–Ω–Ω—ã–π –∫–æ—Ç–∏–∫! üåü",
            "–ù–µ –º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å —Å–ª–æ–≤ –¥–ª—è —Ç–∞–∫–æ–π –º–∏–ª–æ—Ç—ã! ü•∞",
            "–≠—Ç–æ—Ç –∫–æ—Ç–∏–∫ —è–≤–Ω–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç —á—Ç–æ-—Ç–æ –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω–æ–µ! üåé",
            "–ü–æ—Ö–æ–∂–µ, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—à–∏—Å—Ç–æ—Å—Ç–∏ –∑–∞ —Ä–∞–±–æ—Ç–æ–π! üé©",
            "–ù–∞—Å—Ç–æ—è—â–∏–π –º–∞—Å—Ç–µ—Ä –∫–æ—à–∞—á—å–∏—Ö –ø–æ–∑! üì∏"
        ]
        return random.choice(responses)
    
    async def _query_huggingface(self, model: str, image_data: bytes):
        """–ó–∞–ø—Ä–æ—Å –∫ Hugging Face API"""
        if not self.huggingface_api_key:
            logger.warning("No HuggingFace API key provided")
            return None
            
        headers = {
            "Authorization": f"Bearer {self.huggingface_api_key}",
        }
        
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                async with session.post(
                    f"{self.base_url}/{model}",
                    headers=headers,
                    data=image_data
                ) as response:
                    
                    logger.info(f"API response status: {response.status}")
                    
                    if response.status == 200:
                        result = await response.json()
                        logger.info(f"API success: {result}")
                        return result
                    elif response.status == 503:
                        error_text = await response.text()
                        logger.warning(f"Model loading: {error_text}")
                        return {"error": "model_loading"}
                    else:
                        error_text = await response.text()
                        logger.error(f"API error {response.status}: {error_text}")
                        return None
                        
        except Exception as e:
            logger.error(f"Request failed: {e}")
            return None

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
cat_analyzer = CatAnalyzer()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –≤–∞—à–∏–º photo_handler.py
async def analyze_cat_image(image_data: bytes) -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ photo_handler.py
    """
    return await cat_analyzer.analyze_cat_image(image_data)